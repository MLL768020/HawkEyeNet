# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 10  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  #n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  #s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  #  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [ 1.00, 1.00, 512 ]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
#  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
backbone:
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, SCDown, [512, 3, 2]] # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, SCDown, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, C2fCIB, [1024, True]]
  - [-1, 1, ASPP, [1024, 512]] # 9
  - [-1, 1, PSA, [1024]] # 10

head:

  - [ -1, 1, ChannelAttention_HSFPN, [ ] ] # 11
  - [ -1, 1, nn.Conv2d, [ 256, 1 ] ] # 12
  - [ -1, 1, nn.ConvTranspose2d, [ 256, 3, 2, 1, 1 ] ] # 13

  - [ 6, 1, ChannelAttention_HSFPN, [ ] ] # 14
  - [ -1, 1, nn.Conv2d, [ 256, 1 ] ] # 15
  - [ 13, 1, ChannelAttention_HSFPN, [ 4, False ] ] # 16
  - [ [ -1, -2 ], 1, Multiply, [ ] ] # 17
  - [ [ -1, 13 ], 1, Add, [ ] ] # 18
  - [ -1, 3, RepC3, [ 256, 0.5 ] ] # 19 P4/16

  - [ 13, 1, nn.ConvTranspose2d, [ 256, 3, 2, 1, 1, 16 ] ] # 20
  - [ 4, 1, ChannelAttention_HSFPN, [ ] ] # 21
  - [ -1, 1, nn.Conv2d, [ 256, 1 ] ] # 22
  - [ 20, 1, ChannelAttention_HSFPN, [ 4, False ] ] # 23
  - [ [ -1, -2 ], 1, Multiply, [ ] ] # 24
  - [ [ -1, 20 ], 1, Add, [ ] ] # 25
  - [ -1, 3, RepC3, [ 256, 0.5 ] ] # 26 P3/8



  - [ [ 26, 19, 12 ], 1, RTDETRDecoder, [ nc,256,300,4,2,1 ] ]  # Detect(P3, P4, P5)
